---
  - set_fact: log_dir="./"
    when: log_dir is undefined

  - name: "set targe(HA)"
    set_fact:
      TARGET: "{{ SCAN_NAME }}"
    when: dbca != 'single'

  - name: "set target(SINGLE)"
    set_fact:
      TARGET:  '{{ hostvars[groups["dbserver"][0]]["ansible_" + VXLAN_DEV ].ipv4.address }}'
    when: dbca == 'single'  
 
  - name: "install jdbcrunner dependency library"
    become: yes
    dnf:
      name:
        - git
        - ant
      state: latest
    when: inventory_hostname == groups["client"][0]

  - name: "create createuser.sh"
    become: yes
    become_user: oracle
    template: 
      src: createuser.sh.j2 
      dest: "~/createuser.sh"
      mode: 0755
    when: inventory_hostname == groups["dbserver"][0]

  - name: "createuser"
    become: yes
    become_user: oracle
    shell: bash -x ./createuser.sh
    args:
      chdir: "~/"
    when: inventory_hostname == groups["dbserver"][0]
    register: createuser_result

  - debug: var=createuser_result.stdout_lines
    when: inventory_hostname == groups["dbserver"][0]
      
  - name:download jdbcrunner
    git:
      repo: ""{{ GIT_BASE_URL }}{{ JDBCRUNNER_REPO }}"
      dest: "~/jdbcrunner"
    when: inventory_hostname == groups["client"][0]

  - name: "unzip jdbcdriver"
    local_action: shell {{ UNZIP }} /media/{{ GRID_MEDIA }} {{ JDBCDRIVER }}
    args:
      creates: "/tmp/{{ JDBCDRIVER }}"
      executable: /bin/bash
      chdir: /tmp
    run_once: true
    when: inventory_hostname == groups["client"][0] and MEDIA_COPY is defined and MEDIA_COPY !=""
      
  - name: "copy jdbcdriver"
    copy:
      src: "/tmp/{{ JDBCDRIVER }}"
      dest: "~/jdbcrunner/lib/ojdbc.jar"
    when: inventory_hostname == groups["client"][0] and MEDIA_COPY is defined and MEDIA_COPY !=""

  - name: ant
    shell: /usr/bin/ant && touch ant.txt
    args:
      chdir: "~/jdbcrunner"
      creates: ant.txt
    when: inventory_hostname == groups["client"][0]

  - name: load tpcc data
    shell: "/usr/bin/java -Djava.security.egd=file:/dev/./urandom -cp jdbcrunner-1.3-nojdbc.jar:lib/ojdbc.jar JR scripts/tpcc_load.js -jdbcDriver oracle.jdbc.driver.OracleDriver -jdbcUrl jdbc:oracle:thin:@{{ TARGET }}:1521/{{ PDBNAME }} -jdbcUser {{ TPCCUSER }} -jdbcPass {{ TPCC_PASSWORD }}"
    args:
      chdir: "~/jdbcrunner"
    when: inventory_hostname == groups["client"][0]
    register: tpccload_result

  - debug: var=tpccload_result.stdout_lines
    when: inventory_hostname == groups["client"][0]


  - name:download tpt-oracle
    git:
      repo: ""{{ GIT_BASE_URL }}{{ TPT_REPO }}"
      dest: "~/tpt-oracle"
    when: inventory_hostname == groups["client"][0]



  - name: Download awr_last.sql
    become: yes
    become_user: oracle
    get_url:
      url: https://raw.githubusercontent.com/tanelpoder/tpt-oracle/master/awr/awr_last.sql
      dest: "~/awr_last.sql"
      mode: '0775'
    when: inventory_hostname == groups["dbserver"][0]

  - name: change awr settings
    become: yes
    become_user: oracle
    shell:
      cmd: |
        source ~/.bash_profile
        export ORACLE_SID=`ps -ef | grep ora_pmon_  | grep -v grep | awk -F 'pmon_' '{print $2}'`
        sqlplus 'sys/{{ SYSPASSWORD }} as sysdba' <<'EOF'
        exec DBMS_WORKLOAD_REPOSITORY.MODIFY_SNAPSHOT_SETTINGS ( interval => 1440);
        exec DBMS_WORKLOAD_REPOSITORY.CREATE_SNAPSHOT ();
        exit
        EOF
    args:
      chdir: "~/"
    when: inventory_hostname == groups["dbserver"][0]
      
  - name: exec tpcc
    shell: "/usr/bin/java -Djava.security.egd=file:/dev/./urandom -cp jdbcrunner-1.3-nojdbc.jar:lib/ojdbc.jar JR scripts/tpcc.js  -measurementTime {{ TPCC_MEASURETIME }} -warmupTime {{ TPCC_WARMUPTIME }} -jdbcDriver oracle.jdbc.driver.OracleDriver -jdbcUrl jdbc:oracle:thin:@{{ TARGET }}:1521/{{ PDBNAME }}  -jdbcUser {{ TPCCUSER }} -jdbcPass {{ TPCC_PASSWORD }}"
    args:
      chdir: "~/jdbcrunner"
    when: inventory_hostname == groups["client"][0]

  - name: get awr report
    become: yes
    become_user: oracle
    shell:
      cmd: |
        source ~/.bash_profile
        export ORACLE_SID=`ps -ef | grep ora_pmon_  | grep -v grep | awk -F 'pmon_' '{print $2}'`
        sqlplus 'sys/{{ SYSPASSWORD }} as sysdba' <<'EOF'
        exec DBMS_WORKLOAD_REPOSITORY.CREATE_SNAPSHOT ();
        spool awr.log
        @awr_last
        spool off
        exit
        EOF
    args:
      chdir: "~/tpt-oracle/awr/"
    when: inventory_hostname == groups["dbserver"][0]

  - name: fetch jdbcrunner.log
    fetch:
      src: "~/jdbcrunner/logs/jdbcrunner.log"
      dest: "{{ log_dir }}/jdbcrunner"
    when: inventory_hostname == groups["client"][0]

  - name: fetch awr.log
    become: yes
    fetch:
      src: "~/tpt-oracle/awr/awr.log"
      dest: "{{ log_dir }}/awr"
    when: inventory_hostname == groups["dbserver"][0]
