---
  - name: "crete directory"
    become: yes
    file:
      path: "{{ MEDIA_PATH }}"
      state: directory
      mode: 0755
      group: oinstall
      owner: grid
    when: inventory_hostname == groups["dbserver"][0]
    tags:
      - creategridrsp
      - gridinstall
      - installdbca

  - name: "copy grid media"
    become: yes
    become_user: grid
    unarchive:
      src: "/media/{{ GRID_MEDIA }}"
      dest: "{{ GRID_ORACLE_HOME }}"
      creates: "{{ GRID_ORACLE_HOME }}/bin"
    when: inventory_hostname == groups["dbserver"][0]
    tags:
      - creategridrsp
      - gridinstall
      - installdbca

  - name: "copy grid patch"
    become: yes
    become_user: grid
    unarchive:
      src: "/media/{{ GRID_PATCH }}"
      dest: "{{ MEDIA_PATH }}"
      creates: "{{ MEDIA_PATH }}/{{ GRID_PATCH_NUM }}"
    when: inventory_hostname == groups["dbserver"][0]
    tags:
      - creategridrsp
      - gridinstall
      - installdbca

  - name: "create grid/asm.rsp"
    become: yes
    template:
      src: "{{ item }}.rsp.j2"
      dest: "/home/grid/{{ item }}.rsp"
      owner: grid
      group: oinstall
      mode: 0644
    when: inventory_hostname == groups["dbserver"][0]
    with_items:
      - grid
      - asm
    tags:
      - creategridrsp
      - gridinstall
      - installdbca

  - name: "runInstaller(grid)"
    become: yes
    become_user: grid
    shell: "{{ GRID_ORACLE_HOME }}/gridSetup.sh -silent -applyRU {{ MEDIA_PATH }}/{{ GRID_PATCH_NUM }} -responseFile /home/grid/grid.rsp -waitforcompletion {{ INSTALL_OPS }}"
    when: inventory_hostname == groups["dbserver"][0]
    register: runinstallergrid_result
    ignore_errors: True
    tags:
      - runinstallergrid
      - gridinstall
      - installdbca

  - debug: var=runinstallergrid_result.stdout_lines
    when: inventory_hostname == groups["dbserver"][0]
    failed_when: runinstallergrid_result.rc !=0 and runinstallergrid_result.rc != 250 and runinstallergrid_result.rc != 6
    tags:
      - runinstallergrid
      - gridinstall
      - installdbca

  - name: "orainstrootsh"
    become: yes
    shell: "{{ ORAINVENTORY }}/orainstRoot.sh -silent"
    register: orainstrootsh_result
    tags:
      - orainstrootsh
      - gridinstall
      - installdbca

  - debug: var=orainstrootsh_result.stdout_lines
    tags:
      - orainstrootsh
      - gridinstall
      - installdbca

#  - name: "grid root.sh"
#    become: yes
#    shell: "{{ GRID_ORACLE_HOME }}/root.sh -silent"
#    when: inventory_hostname == groups["dbserver"][0]
#    delegate_to: "{{ hostvars[ item.1 ]['ansible_eth0']['ipv4']['address'] }}"
#    with_indexed_items: "{{ groups['dbserver'] }}"
#    register: gridrootsh_result
#    async: "{{ ASYNC }}"
#    poll: "{{ POLL }}"
#    tags:
#      - gridrootsh
#      - gridinstall
#
#  - debug: var=gridrootsh_result.stdout_lines
#    tags:
#      - gridrootsh
#      - gridinstall

  - name: "Update relink_rac_on(dnfs_off)"
    become: yes
    replace:
      dest: "{{ GRID_ORACLE_HOME }}/crs/config/relink_rac_on"
      regexp: "dnfs_on"
      replace: "dnfs_on 	dnfs_off"
    when: DNFS is defined and DNFS == 'disable'
    tags:
      - disablednfs
      - gridrootsh
      - gridinstall
      - installdbca

#  - name: "install strace packages"
#    become: yes
#    yum: name=strace state=present
#    tags:
#      - gridrootsh

  - name: "grid 1st root.sh"
    become: yes
#    shell: "strace -f -F -o /tmp/strace.txt {{ GRID_ORACLE_HOME }}/root.sh -silent"
    shell: "{{ GRID_ORACLE_HOME }}/root.sh -silent"
    register: grid1strootsh_result
    when: inventory_hostname == groups["dbserver"][0]
#    ignore_errors: True
    tags:
      - grid1strootsh
      - gridrootsh
      - gridinstall
      - installdbca

  - debug: var=grid1strootsh_result.stdout_lines
    when: inventory_hostname == groups["dbserver"][0]
#    failed_when: grid1strootsh_result.rc !=0 and grid1strootsh_result.stdout.find('system reboot') != -1
    tags:
      - grid1strootsh
      - gridrootsh
      - gridinstall
      - installdbca

  - name: "grid other root.sh"
    become: yes
    shell: "{{ GRID_ORACLE_HOME }}/root.sh -silent"
    register: gridotherrootsh_result
    when: inventory_hostname != groups["dbserver"][0]
#    ignore_errors: True
    tags:
      - gridotherrootsh
      - gridrootsh
      - gridinstall
      - installdbca

  - debug: var=gridotherrootsh_result.stdout_lines
    when: inventory_hostname != groups["dbserver"][0]
#    failed_when: gridotherrootsh_result.rc !=0 and gridotherrootsh_result.stdout.find('system reboot') != -1
    tags:
      - gridotherrootsh
      - gridrootsh
      - gridinstall
      - installdbca

#  - name: "change css misscount"
#    become: yes
#    shell: "{{ GRID_ORACLE_HOME }}/bin/crsctl set css misscount 360"
#    when: inventory_hostname == groups["dbserver"][-1]
#    tags:
#      - runinstallergrid
#      - gridinstall
#      - installdbca


  - name: "create diskgroup"
    become: yes
    become_user: grid
    shell : "{{ GRID_ORACLE_HOME }}/bin/asmca -silent -createDiskGroup  -diskGroupName {{ item.name }} -disk {{ item.path }} -redundancy EXTERNAL -au_size 1"
    when: inventory_hostname == groups["dbserver"][0] and storage_type !='nbd'
    register: createdg_result
    with_items:
      - { name: "{{ DATA_DISKGROUP_NAME }}", path: "{{ DATA_DEV }}" }
      - { name: "{{ FRA_DISKGROUP_NAME }}", path: "{{ FRA_DEV }}" }
    tags:
      - gridinstall
      - createdg
      - installdbca
      
  - name: "crsctl"
    become: yes
    become_user: grid
    shell: "{{ GRID_ORACLE_HOME }}/bin/crsctl status resource -t"
    register: crsctl_result
    tags:
      - crsctl
      - gridinstall
      - installdbca

  - debug: var=crsctl_result.stdout_lines
    tags:
      - crsctl
      - gridinstall
      - installdbca
